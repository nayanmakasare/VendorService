// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: VendorService.proto

package VendorService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for VendorService service

type VendorService interface {
	GetVendorSpecification(ctx context.Context, in *VendorRequestSpecification, opts ...client.CallOption) (VendorService_GetVendorSpecificationService, error)
	RegisterOrUpdateBrand(ctx context.Context, in *VendorBrandSpecification, opts ...client.CallOption) (*BrandResponse, error)
	UnRegisterBrand(ctx context.Context, in *VendorRequestSpecification, opts ...client.CallOption) (*BrandResponse, error)
}

type vendorService struct {
	c    client.Client
	name string
}

func NewVendorService(name string, c client.Client) VendorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "VendorService"
	}
	return &vendorService{
		c:    c,
		name: name,
	}
}

func (c *vendorService) GetVendorSpecification(ctx context.Context, in *VendorRequestSpecification, opts ...client.CallOption) (VendorService_GetVendorSpecificationService, error) {
	req := c.c.NewRequest(c.name, "VendorService.GetVendorSpecification", &VendorRequestSpecification{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &vendorServiceGetVendorSpecification{stream}, nil
}

type VendorService_GetVendorSpecificationService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*VendorBrandSpecification, error)
}

type vendorServiceGetVendorSpecification struct {
	stream client.Stream
}

func (x *vendorServiceGetVendorSpecification) Close() error {
	return x.stream.Close()
}

func (x *vendorServiceGetVendorSpecification) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *vendorServiceGetVendorSpecification) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *vendorServiceGetVendorSpecification) Recv() (*VendorBrandSpecification, error) {
	m := new(VendorBrandSpecification)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vendorService) RegisterOrUpdateBrand(ctx context.Context, in *VendorBrandSpecification, opts ...client.CallOption) (*BrandResponse, error) {
	req := c.c.NewRequest(c.name, "VendorService.RegisterOrUpdateBrand", in)
	out := new(BrandResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorService) UnRegisterBrand(ctx context.Context, in *VendorRequestSpecification, opts ...client.CallOption) (*BrandResponse, error) {
	req := c.c.NewRequest(c.name, "VendorService.UnRegisterBrand", in)
	out := new(BrandResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VendorService service

type VendorServiceHandler interface {
	GetVendorSpecification(context.Context, *VendorRequestSpecification, VendorService_GetVendorSpecificationStream) error
	RegisterOrUpdateBrand(context.Context, *VendorBrandSpecification, *BrandResponse) error
	UnRegisterBrand(context.Context, *VendorRequestSpecification, *BrandResponse) error
}

func RegisterVendorServiceHandler(s server.Server, hdlr VendorServiceHandler, opts ...server.HandlerOption) error {
	type vendorService interface {
		GetVendorSpecification(ctx context.Context, stream server.Stream) error
		RegisterOrUpdateBrand(ctx context.Context, in *VendorBrandSpecification, out *BrandResponse) error
		UnRegisterBrand(ctx context.Context, in *VendorRequestSpecification, out *BrandResponse) error
	}
	type VendorService struct {
		vendorService
	}
	h := &vendorServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VendorService{h}, opts...))
}

type vendorServiceHandler struct {
	VendorServiceHandler
}

func (h *vendorServiceHandler) GetVendorSpecification(ctx context.Context, stream server.Stream) error {
	m := new(VendorRequestSpecification)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.VendorServiceHandler.GetVendorSpecification(ctx, m, &vendorServiceGetVendorSpecificationStream{stream})
}

type VendorService_GetVendorSpecificationStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*VendorBrandSpecification) error
}

type vendorServiceGetVendorSpecificationStream struct {
	stream server.Stream
}

func (x *vendorServiceGetVendorSpecificationStream) Close() error {
	return x.stream.Close()
}

func (x *vendorServiceGetVendorSpecificationStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *vendorServiceGetVendorSpecificationStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *vendorServiceGetVendorSpecificationStream) Send(m *VendorBrandSpecification) error {
	return x.stream.Send(m)
}

func (h *vendorServiceHandler) RegisterOrUpdateBrand(ctx context.Context, in *VendorBrandSpecification, out *BrandResponse) error {
	return h.VendorServiceHandler.RegisterOrUpdateBrand(ctx, in, out)
}

func (h *vendorServiceHandler) UnRegisterBrand(ctx context.Context, in *VendorRequestSpecification, out *BrandResponse) error {
	return h.VendorServiceHandler.UnRegisterBrand(ctx, in, out)
}
